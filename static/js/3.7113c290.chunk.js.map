{"version":3,"sources":["components/profile/profileInfo/profileInfo.module.css","components/profile/MyPosts/MyPosts.module.css","components/profile/MyPosts/Posts/Post.module.css","components/profile/MyPosts/Posts/Post.jsx","components/profile/MyPosts/MyPosts.jsx","components/profile/MyPosts/MyPostsContainer.jsx","components/profile/profileInfo/profileStatusWithHooks.jsx","components/profile/profileInfo/profileInfo.jsx","components/profile/profile.jsx","components/profile/profileContainer.jsx"],"names":["module","exports","item","s","Post","message","likeCount","className","postsBlock","postsWrap","maxLength10","maxLengthCreator","MyPosts","React","memo","posts","addPost","newPostText","updateNewPostText","console","log","postsElements","map","post","index","likesCount","key","AddNewPostFormRedux","onSubmit","values","reduxForm","form","props","handleSubmit","Field","name","component","Textarea","validate","required","placeholder","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","Preloader","descrBlock","src","photos","large","alt","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUsersProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.7113c290.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descrBlock\":\"profileInfo_descrBlock__Iki0H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1rHE9\",\"postsWrap\":\"MyPosts_postsWrap__18tBR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__267QS\",\"active\":\"Post_active__1ABDy\"};","import React from \"react\";\nimport s from \"./Post.module.css\";\n\nconst { item } = s;\n\nconst Post = ({ message, likeCount }) => {\n  return (\n    <div className={item}>\n      {message}\n      <div> like {likeCount}</div>\n    </div>\n  );\n};\n\nexport default Post;\n","import React, { PureComponent } from \"react\";\nimport s from \"./MyPosts.module.css\";\nimport Post from \"./Posts/Post\";\nimport {\n  required,\n  maxLengthCreator,\n} from \"../../../utils/validators/validators\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\n//import {updateNewPostActionCreator, addPostActionCreator} from \"../../../redux/profile-reducer\"\nimport { Field, reduxForm } from \"redux-form\";\n\nconst { postsBlock, postsWrap } = s;\n\nconst maxLength10 = maxLengthCreator(10);\n\n//\n\nconst MyPosts = React.memo(\n  ({ posts, newPostText, addPost, updateNewPostText }) => {\n\n    console.log('Render YO')\n    // shouldComponentUpdate(nextProps, nextState) {\n    //   return nextProps !== this.props || nextState !== this.state;\n    // }\n\n    let postsElements = posts.map((post, index) => (\n      <Post message={post.message} likeCount={post.likesCount} key={index} />\n    ));\n\n    let onAddPost = (values) => {\n      addPost(values.newPostText);\n    };\n    return (\n      <div className={postsBlock}>\n        <h3>My posts</h3>\n        <AddNewPostFormRedux onSubmit={onAddPost} />\n        <div className={postsWrap}>{postsElements}</div>\n      </div>\n    );\n\n    //до 76 был но потом убрали\n    //let newPostElement = React.createRef(); //Здесь создаеться пустая ссылка Здесь возвращаеться {} с свойством current\n    //когда ref задаем к нужному элементу тогда newPostElement будут ссылаться на нужный элемент\n  }\n);\n\n//PURE COMPONENT\n\n// class MyPosts extends PureComponent {\n//   // shouldComponentUpdate(nextProps, nextState) {\n//   //   return nextProps !== this.props || nextState !== this.state;\n//   // }\n\n//   render() {\n//     let postsElements = this.props.posts.map((post, index) => (\n//       <Post message={post.message} likeCount={post.likesCount} key={index} />\n//     ));\n\n//     let onAddPost = (values) => {\n//       this.props.addPost(values.newPostText);\n//     };\n//     return (\n//       <div className={postsBlock}>\n//         <h3>My posts</h3>\n//         <AddNewPostFormRedux onSubmit={onAddPost} />\n//         <div className={postsWrap}>{postsElements}</div>\n//       </div>\n//     );\n//   }\n\n//   //до 76 был но потом убрали\n//   //let newPostElement = React.createRef(); //Здесь создаеться пустая ссылка Здесь возвращаеться {} с свойством current\n//   //когда ref задаем к нужному элементу тогда newPostElement будут ссылаться на нужный элемент\n// }\n\nconst AddNewPostForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <div>\n        <Field\n          name=\"newPostText\"\n          component={Textarea}\n          validate={[required, maxLength10]}\n          placeholder=\"Post message\"\n        />\n      </div>\n      <div>\n        <button>Add post</button>\n      </div>\n    </form>\n  );\n};\n\nlet AddNewPostFormRedux = reduxForm({ form: \"profileAddNewPostForm\" })(\n  AddNewPostForm\n);\n\nexport default MyPosts;\n\n//Логика такая => добавляем в state новое значение через  onPostChange\n// а потом addPost смотрит state и меняет как нужно\n","import React from \"react\";\nimport {\n  addPostActionCreator,\n} from \"../../../redux/profile-reducer\";\nimport MyPosts from \"./MyPosts\";\nimport {connect} from \"react-redux\";\n\n//Свой вариант создания контейнера\n// const MyPostsContainer = () => {\n//   return (\n//     <StoreContext.Consumer>\n//       {(store) => {\n//         let state = store.getState();\n//         let addPost = () => {\n//           store.dispatch(addPostActionCreator());\n//         };\n\n//         let onPostChange = (text) => {\n//           store.dispatch(updateNewPostActionCreator(text));\n//         };\n//         return (\n//           <MyPosts\n//             updateNewPostText={onPostChange}\n//             addPost={addPost}\n//             posts={state.profilePage.posts}\n//             newPostText={state.profilePage.newPostText}\n//           />\n//         );\n//       }}\n//     </StoreContext.Consumer>\n//   );\n// };\n\nconst mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText));\n    }\n  }\n}\n\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchToProps)(MyPosts);\n\nexport default MyPostsContainer;\n","import React, { useState, useEffect } from \"react\";\nimport s from \"./profileInfo.module.css\";\n\nconst ProfileStatusWithHooks = (props) => {\n  let [editMode, setEditMode] = useState(false);\n  let [status, setStatus] = useState(props.status);\n   \n  useEffect(()=>{\n    setStatus(props.status)\n  },[props.status])\n\n  const activateMode = () => {\n    setEditMode(true);\n  };\n\n  const deactivateMode = () => {\n    setEditMode(false);\n    props.updateStatus(status)\n  };\n\n  const onStatusChange = (e) => {\n    setStatus(e.currentTarget.value);\n  };\n\n  return (\n    <div>\n      {!editMode && (\n        <div>\n          <span onDoubleClick={activateMode}>{props.status || \"-----\"}</span>\n        </div>\n      )}\n      {editMode && (\n        <div>\n          <input\n            onChange={onStatusChange}\n            autoFocus={true}\n            onBlur={deactivateMode}\n            value={status}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProfileStatusWithHooks;\n","import React from \"react\";\nimport s from \"./profileInfo.module.css\";\nimport Preloader from \"../../common/preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./profileStatusWithHooks\";\n\nconst ProfileInfo = ({ profile, status, updateStatus }) => {\n  if (!profile) {\n    return <Preloader />;\n  }\n\n  const { descrBlock } = s;\n  return (\n    <div>\n      <div className={descrBlock}>\n        <img src={profile.photos.large} alt=\"profile\" />\n        <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import React from \"react\";\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\nimport ProfileInfo from \"./profileInfo/profileInfo\";\nimport s from \"./profile.module.css\";\n\nconst Profile = (props) => {\n  return (\n    <div>\n      <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus} />\n      <MyPostsContainer/>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, {Component} from \"react\";\nimport Profile from \"./profile\";\nimport {getUsersProfile, getStatus,updateStatus} from \"../../redux/profile-reducer\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router-dom\";\n// import {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {compose} from \"redux\";\n\n\n\nclass ProfileContainer extends Component {\n\n  componentDidMount(){\n    let userId = this.props.match.params.userId; //withRouter\n    if(!userId) {\n      userId = this.props.authorizedUserId\n      if(!userId){\n        this.props.history.push(\"/login\")\n      }\n    }\n    \n    this.props.getUsersProfile(userId);\n    this.props.getStatus(userId)\n  }\n\n  render() {\n\n     return (\n        <Profile {...this.props} \n        profile={this.props.profile}\n        status={this.props.status} \n        updateStatus={this.props.updateStatus}/> \n        //this.props.profile => state.profilepage.profile  =>  profilePage: profileReducer,\n    );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    profile: state.profilePage.profile,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth\n  }\n}\n\n\nexport default compose(\n  connect(mapStateToProps,{\n    getUsersProfile,getStatus,updateStatus\n  }),\n  withRouter,\n  // withAuthRedirect\n)(ProfileContainer)\n\n//если просто передать как объект MDTH то тогда connect сама обернет actionCreator в disptahc и передаст в store\n\n//Мы сделали комментарий к withAuthRedirect для того чтобы любой человек смог посмотреть профиль \n\n\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\n// export default connect(mapStateToProps,{\n//   getUsersProfile\n// })(WithUrlDataContainerComponent)\n\n//ProfileContainer => контейнерная компоненте для profile\n"],"sourceRoot":""}