{"version":3,"sources":["components/dialogs/dialogs.module.css","components/dialogs/dialogItem/DialogItem.jsx","components/dialogs/message/Message.jsx","components/dialogs/addMessageForm/addMessageForm.jsx","components/dialogs/dialogs.jsx","hoc/WithAuthRedirect.js","components/dialogs/dialogsContainer.jsx"],"names":["module","exports","active","s","dialog","DialogItem","props","name","id","path","className","to","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","placeholder","Field","component","Textarea","validate","required","dialogsWrap","dialogsItem","messagesWrap","Dialogs","textarea","dialogBtn","dialogsElements","dialogsPage","dialogs","map","d","key","messagesElements","messages","m","isAuth","values","sendMessage","newMessage","mapStateToPropsForRedirect","state","console","log","auth","compose","connect","dispatch","addMessageActionCreator","Component","RedirectComponent","this","React","AddMessageFormRedux"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,6BAA6B,YAAc,6BAA6B,OAAS,wBAAwB,OAAS,wBAAwB,aAAe,8BAA8B,SAAW,0BAA0B,UAAY,6B,sFCGzPC,GAAUC,IAAlBC,OAAkBD,IAAVD,QAWAG,EATI,SAAAC,GAAU,IACnBC,EAAaD,EAAbC,KAAMC,EAAOF,EAAPE,GACRC,EAAI,mBAAeD,GACzB,OACE,yBAAKE,UAAoBR,GACvB,kBAAC,IAAD,CAASS,GAAIF,GAAb,IAAqBF,EAArB,OCPCH,EAAUD,IAAVC,OAUQQ,EANC,SAAAN,GAAU,IAChBO,EAAYP,EAAZO,QACR,OAAO,yBAAKH,UAAWN,GAASS,I,yCCF5BC,EAAcC,YAAiB,IAiBtBC,cAAU,CAAEC,KAAM,wBAAlBD,EAfQ,SAACV,GACtB,OACE,0BAAMY,SAAUZ,EAAMa,aAAcC,YAAY,mBAC9C,kBAACC,EAAA,EAAD,CACEC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBP,KAAK,eAEP,6BACE,oDCZAmB,EAAgEvB,IAAhEuB,YAAaC,EAAmDxB,IAAnDwB,YAAaC,EAAsCzB,IAAtCyB,aAyBnBC,GAzByD1B,IAAxB2B,SAAwB3B,IAAd4B,UAE1C,SAACzB,GACf,IAII0B,EAAkB1B,EAAM2B,YAAYC,QAAQC,KAAI,SAACC,GAAD,OAClD,kBAAC,EAAD,CAAY7B,KAAM6B,EAAE7B,KAAMC,GAAI4B,EAAE5B,GAAI6B,IAAKD,EAAE5B,QAEzC8B,EAAmBhC,EAAM2B,YAAYM,SAASJ,KAAI,SAACK,GAAD,OACpD,kBAAC,EAAD,CAAS3B,QAAS2B,EAAE3B,QAASwB,IAAKG,EAAEhC,QAGtC,OAAKF,EAAMmC,OAGT,yBAAK/B,UAAWgB,GACd,yBAAKhB,UAAWiB,GAAcK,GAC9B,yBAAKtB,UAAWkB,GAAeU,GAC/B,kBAAC,EAAD,CAAqBpB,SAjBL,SAACwB,GACnBpC,EAAMqC,YAAYD,EAAOE,gBAUD,kBAAC,IAAD,CAAUjC,GAAI,a,iDCjBpCkC,EAA6B,SAACC,GAElC,OADAC,QAAQC,IAAIF,EAAMG,KAAKR,QAChB,CACLA,OAAQK,EAAMG,KAAKR,S,OCmDRS,sBACbC,aAnBoB,SAACL,GACrB,MAAO,CACLb,YAAaa,EAAMb,gBAQE,SAACmB,GACxB,MAAO,CACLT,YAAa,SAACC,GACZQ,EAASC,YAAwBT,UD1CP,SAACU,GAAe,IACxCC,EADuC,uKAGzC,OAAKC,KAAKlD,MAAMmC,OAET,kBAACa,EAAcE,KAAKlD,OAFI,kBAAC,IAAD,CAAUK,GAAG,eAHH,GACb8C,IAAMH,WActC,OALiCH,YAAQN,EAARM,CAC/BI,KCoCWL,CAGbQ","file":"static/js/4.2aea3871.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsWrap\":\"dialogs_dialogsWrap__11nlW\",\"dialogsItem\":\"dialogs_dialogsItem__30hGK\",\"active\":\"dialogs_active__25GoT\",\"dialog\":\"dialogs_dialog__2oT6c\",\"messagesWrap\":\"dialogs_messagesWrap__Xcxjm\",\"textarea\":\"dialogs_textarea__1Vc2I\",\"dialogBtn\":\"dialogs_dialogBtn__18dKU\"};","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nimport s from \"./../dialogs.module.css\";\nconst {dialog, active} = s;\n\nconst DialogItem = props => {\n  const { name, id } = props;\n  const path = `/dialogs/${id}`;\n  return (\n    <div className={(dialog, active)}>\n      <NavLink to={path}> {name} </NavLink>\n    </div>\n  );\n};\nexport default DialogItem;\n","import React from \"react\";\n\n\nimport s from \"./../dialogs.module.css\";\nconst {dialog} = s;\n\n\n\nconst Message = props => {\n  const { message } = props;\n  return <div className={dialog}>{message}</div>;\n};\n\n\nexport default Message;\n","import React from \"react\";\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\nimport { Field, reduxForm } from \"redux-form\";\nimport {\n  required,\n  maxLengthCreator,\n} from \"../../../utils/validators/validators\";\n\nconst maxLength50 = maxLengthCreator(50);\n\nconst AddMessageForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit} placeholder=\"Enter your name\">\n      <Field\n        component={Textarea}\n        validate={[required, maxLength50]}\n        name=\"newMessage\"\n      />\n      <div>\n        <button>add message</button>\n      </div>\n    </form>\n  );\n};\n\nexport default reduxForm({ form: \"dialogAddMessageForm\" })(AddMessageForm);\n","import React from \"react\";\nimport DialogItem from \"./dialogItem/DialogItem\";\nimport Message from \"./message/Message\";\nimport s from \"./dialogs.module.css\";\nimport { Redirect } from \"react-router-dom\";\nimport AddMessageFormRedux from \"../../components/dialogs/addMessageForm/addMessageForm\";\n\nconst { dialogsWrap, dialogsItem, messagesWrap, textarea, dialogBtn } = s;\n\nconst Dialogs = (props) => {\n  let addNewMessage = (values) => {\n    props.sendMessage(values.newMessage);\n  };\n\n  let dialogsElements = props.dialogsPage.dialogs.map((d) => (\n    <DialogItem name={d.name} id={d.id} key={d.id} />\n  ));\n  let messagesElements = props.dialogsPage.messages.map((m) => (\n    <Message message={m.message} key={m.id} />\n  ));\n\n  if (!props.isAuth) return <Redirect to={\"/login\"} />;\n\n  return (\n    <div className={dialogsWrap}>\n      <div className={dialogsItem}>{dialogsElements}</div>\n      <div className={messagesWrap}>{messagesElements}</div>\n      <AddMessageFormRedux onSubmit={addNewMessage} />\n    </div>\n  );\n};\n\nexport default Dialogs;\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nconst mapStateToPropsForRedirect = (state) => {\n  console.log(state.auth.isAuth);\n  return {\n    isAuth: state.auth.isAuth,\n  };\n};\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render() {\n      if (!this.props.isAuth) return <Redirect to=\"/login\" />;\n      //this.props.isAuth === false\n      return <Component {...this.props} />;\n    }\n  }\n  //Вот здесь делаем первую обертку\n\n  let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(\n    RedirectComponent\n  );\n  //вот здесь делаем вторую обертку для того чтобы не повторять получения данных isAuth\n\n  return ConnectedRedirectComponent;\n};\n","import React from \"react\";\nimport AddMessageFormRedux from \"./dialogs\";\nimport {\n  addMessageActionCreator,\n} from \"../../redux/dialogs-reducer\";\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\nimport {connect} from \"react-redux\";\nimport {compose} from 'redux'\n\n\n//Старая версия когда мы сами делали контейнерную компоненту\n// const DialogsContainer = () => {\n//   return (\n//     <StoreContext.Consumer>\n//       {(store) => {\n//         let state = store.getState().dialogsPage;\n        \n//         const onSendMessageClick = () => {\n//           store.dispatch(addMessageActionCreator());\n//         };\n\n//         const changeMessageTextArea = (text) => {\n//           store.dispatch(updateNewMessageActionCreator(text));\n//         };\n\n//         return (\n//           <Dialogs\n//             updateNewMessageBoby={changeMessageTextArea}\n//             dialogsPage={state}\n//             sendMessage={onSendMessageClick}\n//           />\n//         );\n//       }}\n//     </StoreContext.Consumer>\n//   );\n// };\n\n//данная функция сама обращается к store и получает state\n//store.getState()\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsPage: state.dialogsPage,\n  }\n}\n// нужна для настройки callBack для функций \n\n\n//connect автоматом сам засунет dispatch \n//а именно store.dispatch.bind(store)\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    sendMessage: (newMessage) => {\n      dispatch(addMessageActionCreator(newMessage));\n    }\n  }\n}\n\nexport default compose(\n  connect(mapStateToProps,mapDispatchToProps),\n  withAuthRedirect\n)(AddMessageFormRedux)\n\n// let AuthRedirectComponent = withAuthRedirect(Dialogs);\n // const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(AuthRedirectComponent);\n// export default DialogsContainer;\n\n\n//Здесь мы делаем connect с redux \n//Здесь нету классового компонента так как пока что мы не делаем запрос на сервер \n//Комментарий от 68 урока"],"sourceRoot":""}